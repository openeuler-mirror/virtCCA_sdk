From f0e099dd14ce25460f66651113ac4092a935c475 Mon Sep 17 00:00:00 2001
From: root <root@localhost.localdomain>
Date: Tue, 6 Aug 2024 09:42:17 +0800
Subject: [PATCH] Support Luks Disk Encryption

---
 samples/virtcca-client/rats-client.c     | 104 ++++++++++++++++++++++-
 samples/virtcca-server/rats-server.c     | 103 +++++++++++++++++-----
 src/attesters/virtcca/collect_evidence.c |   2 +-
 3 files changed, 186 insertions(+), 23 deletions(-)

diff --git a/samples/virtcca-client/rats-client.c b/samples/virtcca-client/rats-client.c
index e0a2891..840bfc1 100644
--- a/samples/virtcca-client/rats-client.c
+++ b/samples/virtcca-client/rats-client.c
@@ -13,6 +13,8 @@
 #include <arpa/inet.h>
 #include <netinet/in.h>
 #include <unistd.h>
+#include <termios.h>
+#include <errno.h>
 #include <internal/core.h>
 #include <rats-tls/api.h>
 #include <rats-tls/log.h>
@@ -26,10 +28,12 @@
 #define DEFAULT_IP   "127.0.0.1"
 #define TOKEN "ATTESTATION_PASS"
 #define REQUEST_IMA_LOG "REQUEST_IMA_LOG"
+#define ENABLE_LUKS_TOKEN "ENABLE_LUKS_TOKEN"
 
 #define SHA256_SIZE 32
 #define SHA512_SIZE 64
 #define MAX_MEASUREMENT_SIZE SHA512_SIZE
+#define MAX_PASSWD_LEN 32
 
 static uint8_t rim_ref[MAX_MEASUREMENT_SIZE];
 static size_t rim_ref_size = MAX_MEASUREMENT_SIZE;
@@ -166,9 +170,92 @@ static int deal_ima(rats_tls_handle handle)
 	return ret;
 }
 
+static int tc_attr_set_echo(bool enbale) {
+    struct termios tty;
+    if (tcgetattr(STDIN_FILENO, &tty) < 0) {
+        RTLS_ERR("tcgetattr failed, err: %s\n", strerror(errno));
+        return ENCLAVE_VERIFIER_ERR_UNKNOWN;
+    }
+
+	if (enbale) {
+		tty.c_lflag |= ECHO;  // Enable echo
+	} else {
+    	tty.c_lflag &= ~ECHO;  // Disable echo
+	}
+
+    if (tcsetattr(STDIN_FILENO, TCSANOW, &tty) < 0) {
+        RTLS_ERR("tcsetattr failed, err: %s\n", strerror(errno));
+        return ENCLAVE_VERIFIER_ERR_UNKNOWN;
+    }
+
+	return RATS_TLS_ERR_BASE;
+}
+
+static int deal_passwd(char password[MAX_PASSWD_LEN])
+{
+	int i = 0;
+    char ch;
+
+	RTLS_INFO("Enter remote disk image password: ");
+    if (tc_attr_set_echo(false)) {
+		return ENCLAVE_VERIFIER_ERR_UNKNOWN;
+	}
+    while ((ch = getchar()) != '\n' && ch != EOF) {
+		if (i > MAX_PASSWD_LEN) {
+			RTLS_ERR("Input passwd too long,\n");
+        	return ENCLAVE_VERIFIER_ERR_UNKNOWN;
+		}
+        password[i++] = ch;
+    }
+	putchar('\n');
+	if (tc_attr_set_echo(true)) {
+		return ENCLAVE_VERIFIER_ERR_UNKNOWN;
+	}
+
+	return RATS_TLS_ERR_BASE;
+}
+
+static int deal_luks_passwd(rats_tls_handle handle, bool enable_luks)
+{
+	int ret = ENCLAVE_VERIFIER_ERR_UNKNOWN;
+	char password[MAX_PASSWD_LEN] = {0};
+    
+
+	RTLS_DEBUG("deal LUKS passwd %d\n", enable_luks);
+	if (enable_luks == false) {
+		RTLS_INFO("LUKS disabled\n");
+		return RATS_TLS_ERR_BASE;
+	}
+
+	char *msg = ENABLE_LUKS_TOKEN;
+	size_t len = strlen(msg);
+	ret = rats_tls_transmit(handle, (void *)msg, &len);
+	if (ret != RATS_TLS_ERR_NONE || len != strlen(msg)) {
+		RTLS_ERR("Failed to send luks token %#x\n", ret);
+		return RATS_TLS_ERR_LOAD_TLS_WRAPPERS;
+	}
+
+	if ((ret = deal_passwd(password))) {
+		RTLS_INFO("deal password failed\n");
+		return ret;
+	}
+
+	msg = password;
+	len = strlen(password);
+	ret = rats_tls_transmit(handle, (void *)msg, &len);
+	if (ret != RATS_TLS_ERR_NONE || len != strlen(msg)) {
+		RTLS_ERR("Failed to send passwd %#x\n", ret);
+		return RATS_TLS_ERR_LOAD_TLS_WRAPPERS;
+	}
+
+	memset(password, 0, MAX_PASSWD_LEN);
+
+	return RATS_TLS_ERR_BASE;
+}
+
 int rats_tls_client_startup(rats_tls_log_level_t log_level, char *attester_type,
 			    char *verifier_type, char *tls_type, char *crypto_type, bool mutual,
-			    bool provide_endorsements, char *ip, int port)
+			    bool provide_endorsements, char *ip, int port, bool enable_luks)
 {
 	rats_tls_conf_t conf;
 
@@ -235,6 +322,11 @@ int rats_tls_client_startup(rats_tls_log_level_t log_level, char *attester_type,
 		goto err;
 	}
 
+	if ((ret = deal_luks_passwd(handle, enable_luks)) != RATS_TLS_ERR_NONE) {
+		RTLS_ERR("deal LUKS failed %#x\n", ret);
+		goto err;
+	}
+
 	const char *msg = TOKEN;
 
 	size_t len = strlen(msg);
@@ -279,7 +371,7 @@ err:
 
 int main(int argc, char **argv)
 {
-	char *const short_options = "a:v:t:c:mel:i:p:r:d:h";
+	char *const short_options = "a:v:t:c:melL:i:p:r:d:h";
 	// clang-format off
 	struct option long_options[] = {
 		{ "attester", required_argument, NULL, 'a' },
@@ -293,6 +385,7 @@ int main(int argc, char **argv)
 		{ "port", required_argument, NULL, 'p' },
 		{ "rim", required_argument, NULL, 'r' },
 		{ "digest", required_argument, NULL, 'd' },
+		{ "LUKS", no_argument, NULL, 'L' },
 		{ "help", no_argument, NULL, 'h' },
 		{ 0, 0, 0, 0 }
 	};
@@ -310,6 +403,7 @@ int main(int argc, char **argv)
 	char *rim = "";
 	char *digest_file = "";
 	int opt;
+	bool enable_luks = false;
 
 	do {
 		opt = getopt_long(argc, argv, short_options, long_options, NULL);
@@ -371,6 +465,9 @@ int main(int argc, char **argv)
 			}
 			memcpy(digest_list_file, digest_file, digest_list_file_size);
 			break;
+		case 'L':
+            enable_luks = true;
+            break;
 		case -1:
 			break;
 		case 'h':
@@ -388,6 +485,7 @@ int main(int argc, char **argv)
 			     "        --port/-p             set the listening tcp port\n"
 			     "        --rim/-r              set the initial measurement of cVM\n"
 			     "        --digest/-d           set the digest list file for verifying IMA measurement\n"
+				 "        --LUKS/-L             is enable LUKS\n"
 			     "        --help/-h             show the usage\n");
 			exit(1);
 		default:
@@ -398,5 +496,5 @@ int main(int argc, char **argv)
 	global_log_level = log_level;
 
 	return rats_tls_client_startup(log_level, attester_type, verifier_type, tls_type,
-				       crypto_type, mutual, provide_endorsements, srv_ip, port);
+				       crypto_type, mutual, provide_endorsements, srv_ip, port, enable_luks);
 }
diff --git a/samples/virtcca-server/rats-server.c b/samples/virtcca-server/rats-server.c
index 8bd7388..8a5c811 100644
--- a/samples/virtcca-server/rats-server.c
+++ b/samples/virtcca-server/rats-server.c
@@ -18,6 +18,7 @@
 #include <rats-tls/api.h>
 #include <rats-tls/log.h>
 #include <rats-tls/claim.h>
+#include <sys/stat.h>
 
 #define DEFAULT_PORT 1234
 #define DEFAULT_IP   "0.0.0.0" /* Listern to connections from any ip */
@@ -25,6 +26,10 @@
 #define REQUEST_IMA_LOG "REQUEST_IMA_LOG"
 #define IMA_MEASUREMENTS_PATH "/sys/kernel/security/ima/binary_runtime_measurements"
 #define IMA_READ_BLCOK_SIZE 1024
+#define ENABLE_LUKS_TOKEN "ENABLE_LUKS_TOKEN"
+#define MAX_PASSWD_LEN 32
+#define LUKS_OPEN_CMD "cryptsetup luksOpen /dev/vda encryptfs"
+#define LUKS_SYMLINK "/dev/mapper/encryptfs"
 
 rats_tls_err_t read_ima_measurements(uint8_t **value, size_t *size)
 {
@@ -94,6 +99,41 @@ free:
 	return ret;
 }
 
+int deal_luks_decrypt(rats_tls_handle handle)
+{
+	uint8_t passwd[MAX_PASSWD_LEN] = {0};
+	size_t len = MAX_PASSWD_LEN;
+	struct stat stat_buf;
+	int ret = ENCLAVE_ATTESTER_ERR_UNKNOWN;
+
+	ret = rats_tls_receive(handle, passwd, &len);
+	if (ret != RATS_TLS_ERR_NONE) {
+		RTLS_ERR("Failed to receive %#x\n", ret);
+		return ret;
+	}
+
+	FILE *fp = popen(LUKS_OPEN_CMD, "w");
+    if (fp == NULL) {
+		RTLS_ERR("luks open failed err: %s\n", strerror(errno));
+		return ENCLAVE_ATTESTER_ERR_UNKNOWN;
+    }
+
+    fprintf(fp, "%s", passwd);
+
+	int status = pclose(fp);
+    if (status == -1) {
+        RTLS_ERR("exec luks open cmd failed, err: %s\n", strerror(errno));
+        return ENCLAVE_ATTESTER_ERR_UNKNOWN;
+    }
+
+    if (lstat(LUKS_SYMLINK, &stat_buf) != 0 && !S_ISLNK(stat_buf.st_mode)) {
+        RTLS_ERR("check luks symlink failed err: %s\n", strerror(errno));
+        return ENCLAVE_ATTESTER_ERR_UNKNOWN;
+    }
+
+	return RATS_TLS_ERR_NONE;
+}
+
 int deal_client_req(rats_tls_handle handle)
 {
 	int ret = ENCLAVE_ATTESTER_ERR_UNKNOWN;
@@ -123,8 +163,10 @@ int deal_client_req(rats_tls_handle handle)
 		if (ret != RATS_TLS_ERR_NONE) {
 			RTLS_ERR("Failed to transmit %#x\n", ret);
 		}
-		ret = RATS_TLS_ERR_NONE;
-	} else if (strncmp(buf, REQUEST_IMA_LOG, strlen(REQUEST_IMA_LOG)) == 0) {
+		return RATS_TLS_ERR_NONE;
+	}
+	
+	if (strncmp(buf, REQUEST_IMA_LOG, strlen(REQUEST_IMA_LOG)) == 0) {
 		ret = send_ima_log(handle);
 		if (ret) {
 			RTLS_ERR("Send IMA log failed %#x\n", ret);
@@ -133,23 +175,41 @@ int deal_client_req(rats_tls_handle handle)
 			/* expect receive the PASS TOKEN */
 			ret = deal_client_req(handle);
 		}
-	} else {
-		strcpy(buf, "Attestation Failed, Continue.....");
-		/* Reply back to the client */
-		len = sizeof(buf);
-		ret = rats_tls_transmit(handle, buf, &len);
-		if (ret != RATS_TLS_ERR_NONE) {
-			RTLS_ERR("Failed to transmit %#x\n", ret);
+		return ret;
+	}
+	
+	if (strncmp(buf, ENABLE_LUKS_TOKEN, strlen(ENABLE_LUKS_TOKEN)) == 0) {
+		ret = deal_luks_decrypt(handle);
+		if (ret) {
+			RTLS_ERR("LUKS decrypt failed %#x\n", ret);
+		} else {
+			RTLS_INFO("LUKS decrypt success\n");
+			/* expect receive the PASS TOKEN */
+			if ((ret = deal_client_req(handle))) {
+				RTLS_ERR("recevice PASS ACK failed %#x\n", ret);
+				return ret;
+			}
+			ret = 0x68; /* Return specific value for LUKS completion */
 		}
-		ret = ENCLAVE_ATTESTER_ERR_UNKNOWN;
+		return ret;
 	}
 
+	strcpy(buf, "Attestation Failed, Continue.....");
+	/* Reply back to the client */
+	len = sizeof(buf);
+	ret = rats_tls_transmit(handle, buf, &len);
+	if (ret != RATS_TLS_ERR_NONE) {
+		RTLS_ERR("Failed to transmit %#x\n", ret);
+	}
+	ret = ENCLAVE_ATTESTER_ERR_UNKNOWN;
+
+
 	return ret;
 }
 
 int rats_tls_server_startup(rats_tls_log_level_t log_level, char *attester_type,
 			    char *verifier_type, char *tls_type, char *crypto_type, bool mutual,
-				bool provide_endorsements, char *ip, int port)
+			    bool provide_endorsements, char *ip, int port)
 {
 	rats_tls_conf_t conf;
 	rats_tls_err_t ret;
@@ -257,23 +317,29 @@ int rats_tls_server_startup(rats_tls_log_level_t log_level, char *attester_type,
 		}
 
 		RTLS_DEBUG("Client connected successfully\n");
-		if ((ret = deal_client_req(handle))) {
+		ret = deal_client_req(handle);
+		if (ret != RATS_TLS_ERR_NONE && ret != 0x68) {
 			RTLS_ERR("Client verify failed %#x\n", ret);
 		} else {
 			RTLS_INFO("Client verify success, do other jobs.\n");
+			close(connd);
 			break;
 		}
 
-close_connd:
+	close_connd:
 		close(connd);
 	}
 
 	shutdown(sockfd, SHUT_RDWR);
 	close(sockfd);
-	ret = rats_tls_cleanup(handle);
-	if (ret != RATS_TLS_ERR_NONE) {
-		RTLS_ERR("Failed to cleanup %#x\n", ret);
-		return ret;
+
+	if (rats_tls_cleanup(handle) != RATS_TLS_ERR_NONE) {
+		RTLS_ERR("Failed to cleanup\n");
+		return RATS_TLS_ERR_INVALID;
+	}
+	
+	if (ret == 0x68) {
+		return 0x68;
 	} else {
 		return 0x67;
 	}
@@ -281,10 +347,9 @@ close_connd:
 err:
 	/* Ignore the error code of cleanup in order to return the prepositional error */
 	shutdown(sockfd, SHUT_RDWR);
-    close(sockfd);
+	close(sockfd);
 	rats_tls_cleanup(handle);
 	return -1;
-
 }
 
 int main(int argc, char **argv)
diff --git a/src/attesters/virtcca/collect_evidence.c b/src/attesters/virtcca/collect_evidence.c
index 2f15551..f0b26dd 100644
--- a/src/attesters/virtcca/collect_evidence.c
+++ b/src/attesters/virtcca/collect_evidence.c
@@ -61,7 +61,7 @@ enclave_attester_err_t virtcca_collect_evidence(enclave_attester_ctx_t *ctx,
 
 	snprintf(evidence->type, sizeof(evidence->type), "virtcca");
 
-	RTLS_DEBUG("ctx %p, evidence %p, report_len %d\n", ctx, evidence, evidence->sev.report_len);
+	RTLS_DEBUG("ctx %p, evidence %p, report_len %d\n", ctx, evidence, evidence->virtcca.report_len);
 
 	return ENCLAVE_ATTESTER_ERR_NONE;
 }
-- 
2.33.0

