From 67cf94d715b25a0fb1ee6976f4dbcbc8e79bc42c Mon Sep 17 00:00:00 2001
From: chenzheng <chenzheng71@huawei.com>
Date: Sat, 14 Dec 2024 10:33:06 +0000
Subject: [PATCH] security check

---
 samples/virtcca-client/ima_measure.c     | 226 +++++++++++++----------
 samples/virtcca-client/inc/ima_measure.h |   9 +
 samples/virtcca-client/rats-client.c     | 220 ++++++++++++----------
 samples/virtcca-server/rats-server.c     |   7 +-
 src/verifiers/virtcca/token_parse.h      |   1 +
 src/verifiers/virtcca/verify_evidence.c  |   4 +
 6 files changed, 270 insertions(+), 197 deletions(-)

diff --git a/samples/virtcca-client/ima_measure.c b/samples/virtcca-client/ima_measure.c
index bec95b4..60d7310 100644
--- a/samples/virtcca-client/ima_measure.c
+++ b/samples/virtcca-client/ima_measure.c
@@ -31,24 +31,34 @@ static int display_digest(u_int8_t *digest, u_int32_t digestlen)
 
 static int ima_eventdigest_parse(u_int8_t *buffer, u_int32_t buflen, u_int8_t *file_digest, u_int32_t *file_digest_len)
 {
+	if (buflen < SHA_DIGEST_LENGTH) {
+		printf("invalid len %u\n", buflen);
+		return -1;
+	}
 	return display_digest(buffer, SHA_DIGEST_LENGTH);
 }
 
 static int ima_eventdigest_ng_parse(u_int8_t *buffer, u_int32_t buflen, u_int8_t *file_digest, u_int32_t *file_digest_len)
 {
 	char hash_algo[CRYPTO_MAX_ALG_NAME + 1] = { 0 };
-	int algo_len = strlen((char *)buffer) - 1; /* format: algo + ':' + '\0' */
+	int algo_len;
 	const EVP_MD *md;
 	int digest_len;
 
-	if (algo_len > CRYPTO_MAX_ALG_NAME) {
-		printf("Hash algorithm name too long\n");
+	if (buflen > CRYPTO_MAX_ALG_NAME + 1) {
+		printf("invalid algo name\n");
 		return ERROR_ENTRY_PARSING;
 	}
 
+	algo_len = strnlen((char *)buffer, buflen); /* format: algo + ':' + '\0' */
+	if (algo_len <= 1) {
+		printf("Hash algorithm name invalid\n");
+		return ERROR_ENTRY_PARSING;
+	}
+	algo_len--;
 	printf("%s", buffer);
-
 	memcpy(hash_algo, buffer, algo_len);
+
 	md = EVP_get_digestbyname(hash_algo);
 	if (md == NULL) {
 		printf("Unknown hash algorithm '%s'\n", hash_algo);
@@ -212,6 +222,12 @@ static int parse_template_data(struct event *template)
 				 sizeof(u_int32_t));
 			offset += sizeof(u_int32_t);
 		}
+
+		if (offset >= template->template_data_len ||
+			field_len > template->template_data_len - offset) {
+			printf("offset or field len is invalid\n");
+			goto out;
+		}
 		result = field->field_parse(template->template_data + offset,
 					    field_len, template->file_digest, &template->file_digest_len);
 		if (result) {
@@ -233,11 +249,14 @@ out:
 static int read_template_data(struct event *template, FILE *fp)
 {
 	int len, is_ima_template;
-	int byte_read;
 
 	is_ima_template = strcmp(template->name, "ima") == 0 ? 1 : 0;
 	if (!is_ima_template) {
-		byte_read = fread(&template->template_data_len, sizeof(u_int32_t), 1, fp);
+		if (fread(&template->template_data_len, sizeof(u_int32_t), 1, fp) != 1 ||
+			template->template_data_len > IMA_TEMPLATE_DATA_MAX_LEN) {
+			printf("ERROR: read length faild or length is invalid\n");
+			return -EINVAL;
+		}
 		len = template->template_data_len;
 	} else {
 		template->template_data_len = SHA_DIGEST_LENGTH +
@@ -256,48 +275,105 @@ static int read_template_data(struct event *template, FILE *fp)
 		return -ENOMEM;
 	}
 
-	byte_read = fread(template->template_data, len, 1, fp);
+	if (fread(template->template_data, len, 1, fp) != 1) {
+		printf("ERROR: read template data failed\n");
+		goto free;
+	}
+
 	if (is_ima_template) {	/* finish 'ima' template data read */
 		u_int32_t field_len;
-
-		byte_read = fread(&field_len, sizeof(u_int32_t), 1, fp);
-		byte_read = fread(template->template_data + SHA_DIGEST_LENGTH,
-		      field_len, 1, fp);
+		if (fread(&field_len, sizeof(u_int32_t), 1, fp) != 1 || field_len > TCG_EVENT_NAME_LEN_MAX) {
+			printf("ERROR: read template data failed\n");
+			goto free;
+		}
+		if (fread(template->template_data + SHA_DIGEST_LENGTH, field_len, 1, fp) != 1) {
+			printf("ERROR: read digest failed\n");
+			goto free;
+		}
 	}
 	return 0;
-}
 
-/*
- * Calculate the sha1 hash of data
- */
-static void calc_digest(u_int8_t *digest, int len, void *data)
-{
-	SHA_CTX c;
-
-	/* Calc template hash for an ima entry */
-	memset(digest, 0, sizeof(*digest));
-	SHA1_Init(&c);
-	SHA1_Update(&c, data, len);
-	SHA1_Final(digest, &c);
+free:
+	free(template->template_data);
+	return -1;
 }
 
-static int verify_template_hash(struct event *template)
+static int verify_template_hash(struct event *template_digest)
 {
 	int rc;
+	u_int8_t digest[SHA_DIGEST_LENGTH] = {0};
+	int len = SHA_DIGEST_LENGTH;
 
-	rc = memcmp(fox, template->header.digest, sizeof(fox));
+	rc = memcmp(fox, template_digest, sizeof(fox));
 	if (rc != 0) {
-		u_int8_t digest[SHA_DIGEST_LENGTH];
-		memset(digest, 0, sizeof(digest));
-		calc_digest(digest, template->template_data_len,
-			    template->template_data);
-		rc = memcmp(digest, template->header.digest, sizeof(digest));
+		EVP_Digest(template_digest->template_data, template_digest->template_data_len,
+					digest, &len, EVP_sha1(), NULL);
+		rc = memcmp(digest, template_digest->header.digest, len);
 		if (rc != 0)
 			printf("- %s\n", "failed");
 	}
 	return rc != 0 ? 1 : 0 ;
 }
 
+static int check_one_template(struct event *template, FILE *fp, char *digest_list_file,
+	u_int8_t digest[SHA256_DIGEST_LENGTH], bool verify)
+{
+	int ret = -1;
+	char digest_hex[MAX_CMD_LEN * 2] = {0};
+	int hash_failed = 0;
+	int i, len = SHA256_DIGEST_LENGTH;
+
+	display_digest(template->header.digest, SHA_DIGEST_LENGTH);
+	memset(template->name, 0, sizeof(template->name));
+	if (template->header.name_len > TCG_EVENT_NAME_LEN_MAX ||
+		fread(template->name, template->header.name_len, 1, fp) == 0) {
+		RTLS_ERR("Reading name failed\n");
+		return -1;
+	}
+	printf(" %s ", template->name);
+
+	if (read_template_data(template, fp) < 0) {
+		RTLS_ERR("Reading of measurement entry failed\n");
+		return -1;
+	}
+
+	if (parse_template_data(template) != 0) {
+		RTLS_ERR("Parsing of measurement entry failed\n");
+		goto free;
+	}
+
+	for (i = 0; i < template->file_digest_len; i++) {
+		sprintf(digest_hex + i * 2, "%02x", (*(template->file_digest + i) & 0xff));
+	}
+	char cmd_str[MAX_CMD_LEN] = {0};
+	if (template->file_digest_len * 2 + strlen("grep -E -i \"^$\"  > /dev/null") + strlen(digest_list_file) >= MAX_CMD_LEN) {
+		RTLS_ERR("Digest list file name too long.\n");
+		goto free;
+	}
+	sprintf(cmd_str, "grep -E -i \"^%s$\" %s > /dev/null", digest_hex, digest_list_file);
+	if (system(cmd_str) != 0) {
+		RTLS_ERR("Failed to verify file hash.\n");
+		goto free;
+	}
+
+	if (verify) {
+		if (verify_template_hash(template) != 0) {
+			hash_failed++;
+		}
+	}
+
+	if (EVP_Digest(template->template_data, template->template_data_len,
+		digest, &len, EVP_sha256(), NULL) != 1) {
+		RTLS_ERR("Failed to verify file hash.\n");
+		goto free;
+	}
+	ret = hash_failed;
+
+free:
+	free(template->template_data);
+	return ret;
+}
+
 /*
  * calculate the SHA1 aggregate-pcr value based on the
  * IMA runtime binary measurements.
@@ -330,13 +406,13 @@ static int verify_template_hash(struct event *template)
  */
 int ima_measure(void *data, size_t datalen, char *digest_list_file, int validate, int verify)
 {
-	int ret;
+	int ret = 0;
 	FILE *fp;
 	struct event template;
-	u_int8_t pcr[SHA256_DIGEST_LENGTH];
+	u_int8_t pcr[SHA256_DIGEST_LENGTH * 2], digest[SHA256_DIGEST_LENGTH];
 	int i, count = 0;
 	int hash_failed = 0;
-	size_t byte_read;
+	unsigned int tmp_len = SHA256_DIGEST_LENGTH;
 	
 	fp = fopen(IMA_MEASUREMENTS_PATH, "r");
 	if (!fp) {
@@ -344,87 +420,49 @@ int ima_measure(void *data, size_t datalen, char *digest_list_file, int validate
 		perror("Unable to open file\n");
 		return 1;
 	}
-	memset(pcr, 0, SHA256_DIGEST_LENGTH);	/* initial PCR content 0..0 */
+	memset(pcr, 0, SHA256_DIGEST_LENGTH * 2);	/* initial PCR content 0..0 */
+	memset(digest, 0, SHA256_DIGEST_LENGTH);
 	memset(zero, 0, SHA_DIGEST_LENGTH);
 	memset(fox, 0xff, SHA_DIGEST_LENGTH);
 
 	printf("### PCR HASH                                  "
 		   "TEMPLATE-NAME\n");
+
+#if OPENSSL_VERSION_NUMBER <= OPENSSL_1_1_0
+	OpenSSL_add_all_digests();
+#endif
+
 	while (fread(&template.header, sizeof(template.header), 1, fp)) {
 		printf("%3d %03u ", count++, template.header.pcr);
-		display_digest(template.header.digest, SHA_DIGEST_LENGTH);
-		memset(template.name, 0, sizeof(template.name));
-		byte_read = fread(template.name, template.header.name_len, 1, fp);
-		printf(" %s ", template.name);
 
-		if (read_template_data(&template, fp) < 0) {
-			RTLS_ERR("Reading of measurement entry failed\n");
+		ret = check_one_template(&template, fp, digest_list_file, digest, verify);
+		if (ret < 0) {
+			printf("check this template failed\n");
 			break;
 		}
-
-		if (parse_template_data(&template) != 0) {
-			RTLS_ERR("Parsing of measurement entry failed\n");
-		}
-
-		char digest_hex[MAX_CMD_LEN * 2] = {0};
-		int i;
-		for (i = 0; i < template.file_digest_len; i++) {
-			sprintf(digest_hex + i * 2, "%02x", (*(template.file_digest + i) & 0xff));
-		}
-		char cmd_str[MAX_CMD_LEN] = {0};
-		if (template.file_digest_len * 2 + strlen("grep -E -i \"^$\"  > /dev/null") + strlen(digest_list_file) >= MAX_CMD_LEN) {
-			printf("Digest list file name too long.\n");
-			return 1;
-		}
-		sprintf(cmd_str, "grep -E -i \"^%s$\" %s > /dev/null", digest_hex, digest_list_file);
-		ret = system(cmd_str);
-		if (ret != 0) {
-			printf("Failed to verify file hash.\n");
-			return 1;
-		}
-
-		/* Calc template hash for an ima entry */
-		SHA256_CTX sha256_ctx;
-		u_int8_t digest[SHA256_DIGEST_LENGTH] = {0};
-		SHA256_Init(&sha256_ctx);
-		SHA256_Update(&sha256_ctx, template.template_data, template.template_data_len);
-		SHA256_Final(digest, &sha256_ctx);
-
-		if (verify) {
-			if (verify_template_hash(&template) != 0) {
-				hash_failed++;
-			}
-		}
+		hash_failed += ret;
 		printf("\n");
-		free(template.template_data);
 
 		/* Extend simulated PCR with new template digest */
-		SHA256_CTX c;
-		SHA256_Init(&c);
-		SHA256_Update(&c, pcr, SHA256_DIGEST_LENGTH);
 		if (validate) {
 			if (memcmp(template.header.digest, zero, SHA_DIGEST_LENGTH) == 0)
 				memset(template.header.digest, 0xFF, SHA_DIGEST_LENGTH);
 		}
-		
-		memset(extend, 0, SHA256_DIGEST_LENGTH);
-		memcpy(extend, digest, SHA256_DIGEST_LENGTH);
-
-		SHA256_Update(&c, extend, SHA256_DIGEST_LENGTH);
-		SHA256_Final(pcr, &c);
 
-		OpenSSL_add_all_digests();
-
-		if (template.header.name_len > TCG_EVENT_NAME_LEN_MAX) {
-			printf("%d ERROR: event name too long!\n",
-			       template.header.name_len);
-			fclose(fp);
-			EVP_cleanup();
-			return 1;
+		memcpy(pcr + SHA256_DIGEST_LENGTH, digest, SHA256_DIGEST_LENGTH);
+		if (EVP_Digest(pcr, 2 * SHA256_DIGEST_LENGTH, digest, &tmp_len, EVP_sha256(), NULL) != 1) {
+			ret = -1;
+			break;
 		}
+		memcpy(pcr, digest, tmp_len);
 	}
-	fclose(fp);
+
+#if OPENSSL_VERSION_NUMBER <= OPENSSL_1_1_0
 	EVP_cleanup();
+#endif
+	fclose(fp);
+	if (ret < 0)
+		return ret;
 
 	printf("PCRAggr (re-calculated): ");
 	display_digest(pcr, SHA256_DIGEST_LENGTH);
diff --git a/samples/virtcca-client/inc/ima_measure.h b/samples/virtcca-client/inc/ima_measure.h
index a481850..b113721 100644
--- a/samples/virtcca-client/inc/ima_measure.h
+++ b/samples/virtcca-client/inc/ima_measure.h
@@ -1,9 +1,16 @@
+#ifndef IMA_MEASURE_H
+#define IMA_MEASURE_H
+
+#include <limits.h>
+
 #define TCG_EVENT_NAME_LEN_MAX	255
 #define IMA_TEMPLATE_FIELD_ID_MAX_LEN	16
 #define IMA_TEMPLATE_NUM_FIELDS_MAX	15
 #define CRYPTO_MAX_ALG_NAME 64
 #define IMA_MAX_HASH_SIZE 64
 #define MAX_CMD_LEN 1024
+#define IMA_TEMPLATE_DATA_MAX_LEN (IMA_MAX_HASH_SIZE + PATH_MAX)
+#define OPENSSL_1_1_0 0x10100000L
 
 #define IMA_TEMPLATE_IMA_NAME "ima"
 #define IMA_TEMPLATE_IMA_FMT "d|n"
@@ -17,3 +24,5 @@
 
 
 int ima_measure(void *data, size_t datalen, char *digest_list_file, int validate, int verify);
+
+#endif
\ No newline at end of file
diff --git a/samples/virtcca-client/rats-client.c b/samples/virtcca-client/rats-client.c
index 840bfc1..fd04e7e 100644
--- a/samples/virtcca-client/rats-client.c
+++ b/samples/virtcca-client/rats-client.c
@@ -34,11 +34,34 @@
 #define SHA512_SIZE 64
 #define MAX_MEASUREMENT_SIZE SHA512_SIZE
 #define MAX_PASSWD_LEN 32
-
-static uint8_t rim_ref[MAX_MEASUREMENT_SIZE];
-static size_t rim_ref_size = MAX_MEASUREMENT_SIZE;
-static uint8_t digest_list_file[PATH_MAX];
-static uint8_t digest_list_file_size = 0;
+#define MAX_IMA_LOG_SIZE (1024 * 1024 * 1024)
+
+static uint8_t g_rim_ref[MAX_MEASUREMENT_SIZE];
+static size_t g_rim_ref_size = MAX_MEASUREMENT_SIZE;
+
+
+#define CHECK_LENGHT_ASSIGN(src, max_len, dst) \
+do { \
+	if (strnlen(src, max_len) == max_len) { \
+		printf("input param len too long.\n"); \
+		return -1; \
+	} \
+	dst = src; \
+} while(0)
+
+typedef struct {
+	char *attester_type;
+	char *verifier_type;
+	char *tls_type;
+	char *crypto_type;
+	char *srv_ip;
+	char *digest_file;
+	uint16_t port;
+	rats_tls_log_level_t log_level;
+	bool mutual;
+	bool provide_endorsements;
+	bool enable_luks;
+} client_args;
 
 int user_callback(void *args)
 {
@@ -75,8 +98,8 @@ int user_callback(void *args)
         return false;
     }
 
-	if (token.cvm_token.rim.len != rim_ref_size || 
-		memcmp(rim_ref, token.cvm_token.rim.ptr, token.cvm_token.rim.len)) {
+	if (token.cvm_token.rim.len != g_rim_ref_size || 
+		memcmp(g_rim_ref, token.cvm_token.rim.ptr, token.cvm_token.rim.len)) {
         printf("Verifying if RIM of cVM token matches reference value: Failed \n");
 		return false;
     }
@@ -84,7 +107,7 @@ int user_callback(void *args)
 	return true;
 }
 
-static int verify_ima_log(rats_tls_handle handle)
+static int verify_ima_log(rats_tls_handle handle, client_args *args)
 {
 	size_t len = sizeof(size_t);
 	size_t ima_log_size = 0;
@@ -100,8 +123,8 @@ static int verify_ima_log(rats_tls_handle handle)
 		RTLS_INFO("Failed to receive IMA log size %#x\n", ret);
 		return RATS_TLS_ERR_LOAD_TLS_WRAPPERS;
 	}
-	if (ima_log_size == 0) {
-		RTLS_INFO("IMA log size is zero.\n");
+	if (ima_log_size == 0 || ima_log_size > MAX_IMA_LOG_SIZE) {
+		RTLS_INFO("IMA log size is invalid, %u\n", ima_log_size);
 		return RATS_TLS_ERR_LOAD_ENCLAVE_ATTESTERS;
 	}
 
@@ -141,7 +164,7 @@ free:
 
 	rtls_core_context_t *ctx = (rtls_core_context_t *)handle;
 	ret = ima_measure(ctx->verifier->config.virtcca.ima_log_hash, \
-		ctx->verifier->config.virtcca.ima_log_hash_len, digest_list_file, 1, 1);
+		ctx->verifier->config.virtcca.ima_log_hash_len, args->digest_file, 1, 1);
 	if (ret) {
 		RTLS_INFO("Filed to verify IMA measurement.\n");
 		ret = ENCLAVE_VERIFIER_ERR_UNKNOWN;
@@ -149,12 +172,12 @@ free:
 	return ret;
 }
 
-static int deal_ima(rats_tls_handle handle)
+static int deal_ima(rats_tls_handle handle, client_args *args)
 {
 	int ret = ENCLAVE_VERIFIER_ERR_UNKNOWN;
 
-	RTLS_DEBUG("IMA file hash patch len %d\n", digest_list_file_size);
-	if (digest_list_file_size == 0) {
+	RTLS_DEBUG("IMA file hash path %s\n", args->digest_file);
+	if (args->digest_file == NULL || strlen(args->digest_file) == 0) {
 		RTLS_INFO("No need to request and verify IMA log.\n");
 		return RATS_TLS_ERR_BASE;
 	}
@@ -166,7 +189,7 @@ static int deal_ima(rats_tls_handle handle)
 		return RATS_TLS_ERR_LOAD_TLS_WRAPPERS;
 	}
 
-	ret = verify_ima_log(handle);
+	ret = verify_ima_log(handle, args);
 	return ret;
 }
 
@@ -201,7 +224,7 @@ static int deal_passwd(char password[MAX_PASSWD_LEN])
 		return ENCLAVE_VERIFIER_ERR_UNKNOWN;
 	}
     while ((ch = getchar()) != '\n' && ch != EOF) {
-		if (i > MAX_PASSWD_LEN) {
+		if (i > MAX_PASSWD_LEN - 1) {
 			RTLS_ERR("Input passwd too long,\n");
         	return ENCLAVE_VERIFIER_ERR_UNKNOWN;
 		}
@@ -237,38 +260,40 @@ static int deal_luks_passwd(rats_tls_handle handle, bool enable_luks)
 
 	if ((ret = deal_passwd(password))) {
 		RTLS_INFO("deal password failed\n");
-		return ret;
+		goto clean;
 	}
 
 	msg = password;
-	len = strlen(password);
+	len = strnlen(password, MAX_PASSWD_LEN);
 	ret = rats_tls_transmit(handle, (void *)msg, &len);
 	if (ret != RATS_TLS_ERR_NONE || len != strlen(msg)) {
 		RTLS_ERR("Failed to send passwd %#x\n", ret);
-		return RATS_TLS_ERR_LOAD_TLS_WRAPPERS;
+		ret = RATS_TLS_ERR_LOAD_TLS_WRAPPERS;
+		goto clean;
 	}
+	ret = RATS_TLS_ERR_BASE;
 
+clean:
 	memset(password, 0, MAX_PASSWD_LEN);
-
-	return RATS_TLS_ERR_BASE;
+	return ret;
 }
 
-int rats_tls_client_startup(rats_tls_log_level_t log_level, char *attester_type,
-			    char *verifier_type, char *tls_type, char *crypto_type, bool mutual,
-			    bool provide_endorsements, char *ip, int port, bool enable_luks)
+static int rats_tls_client_startup(client_args *args)
 {
+	int ret;
 	rats_tls_conf_t conf;
+	rats_tls_handle handle = NULL;
 
 	memset(&conf, 0, sizeof(conf));
-	conf.log_level = log_level;
-	strcpy(conf.attester_type, attester_type);
-	strcpy(conf.verifier_type, verifier_type);
-	strcpy(conf.tls_type, tls_type);
-	strcpy(conf.crypto_type, crypto_type);
+	conf.log_level = args->log_level;
+	strcpy(conf.attester_type, args->attester_type);
+	strcpy(conf.verifier_type, args->verifier_type);
+	strcpy(conf.tls_type, args->tls_type);
+	strcpy(conf.crypto_type, args->crypto_type);
 	conf.cert_algo = RATS_TLS_CERT_ALGO_DEFAULT;
-	if (mutual)
+	if (args->mutual)
 		conf.flags |= RATS_TLS_CONF_FLAGS_MUTUAL;
-	if (provide_endorsements)
+	if (args->provide_endorsements)
 		conf.flags |= RATS_TLS_CONF_FLAGS_PROVIDE_ENDORSEMENTS;
 
 	/* Create a socket that uses an internet IPv4 address,
@@ -284,31 +309,31 @@ int rats_tls_client_startup(rats_tls_log_level_t log_level, char *attester_type,
 	struct sockaddr_in s_addr;
 	memset(&s_addr, 0, sizeof(s_addr));
 	s_addr.sin_family = AF_INET;
-	s_addr.sin_port = htons(port);
+	s_addr.sin_port = htons(args->port);
 
 	/* Get the server IPv4 address from the command line call */
-	if (inet_pton(AF_INET, ip, &s_addr.sin_addr) != 1) {
+	if (inet_pton(AF_INET, args->srv_ip, &s_addr.sin_addr) != 1) {
 		RTLS_ERR("invalid server address\n");
-		return -1;
+		ret = -1;
+		goto err;
 	}
 
 	/* Connect to the server */
-	if (connect(sockfd, (struct sockaddr *)&s_addr, sizeof(s_addr)) == -1) {
+	if ((ret = connect(sockfd, (struct sockaddr *)&s_addr, sizeof(s_addr))) == -1) {
 		RTLS_ERR("failed to call connect()\n");
-		return -1;
+		goto err;
 	}
 
-	rats_tls_handle handle;
-	rats_tls_err_t ret = rats_tls_init(&conf, &handle);
+	ret = rats_tls_init(&conf, &handle);
 	if (ret != RATS_TLS_ERR_NONE) {
 		RTLS_ERR("Failed to initialize rats tls %#x\n", ret);
-		return -1;
+		goto err;
 	}
 
 	ret = rats_tls_set_verification_callback(&handle, user_callback);
 	if (ret != RATS_TLS_ERR_NONE) {
 		RTLS_ERR("Failed to set verification callback %#x\n", ret);
-		return -1;
+		goto err;
 	}
 
 	ret = rats_tls_negotiate(handle, sockfd);
@@ -317,12 +342,12 @@ int rats_tls_client_startup(rats_tls_log_level_t log_level, char *attester_type,
 		goto err;
 	}
 
-	if ((ret = deal_ima(handle)) != RATS_TLS_ERR_NONE) {
+	if ((ret = deal_ima(handle, args)) != RATS_TLS_ERR_NONE) {
 		RTLS_ERR("Verify IMA measurement failed %#x\n", ret);
 		goto err;
 	}
 
-	if ((ret = deal_luks_passwd(handle, enable_luks)) != RATS_TLS_ERR_NONE) {
+	if ((ret = deal_luks_passwd(handle, args->enable_luks)) != RATS_TLS_ERR_NONE) {
 		RTLS_ERR("deal LUKS failed %#x\n", ret);
 		goto err;
 	}
@@ -352,25 +377,20 @@ int rats_tls_client_startup(rats_tls_log_level_t log_level, char *attester_type,
 	printf("Sent to Server: %s\n", msg);
 	printf("Received from Server: %s\n", buf);
 
-	shutdown(sockfd, SHUT_RDWR);
-	close(sockfd);
-	ret = rats_tls_cleanup(handle);
-	if (ret != RATS_TLS_ERR_NONE)
-		RTLS_ERR("Failed to cleanup %#x\n", ret);
-
-	return ret;
-
 err:
 	/* Ignore the error code of cleanup in order to return the prepositional error */
+	if (handle) {
+		rats_tls_cleanup(handle);
+	}
 	shutdown(sockfd, SHUT_RDWR);
 	close(sockfd);
-	rats_tls_cleanup(handle);
-
-	return -1;
+	return ret;
 }
 
-int main(int argc, char **argv)
+static int parse_input_args(int argc, char **argv, client_args *args)
 {
+	int opt;
+	char *rim = NULL;
 	char *const short_options = "a:v:t:c:melL:i:p:r:d:h";
 	// clang-format off
 	struct option long_options[] = {
@@ -391,86 +411,79 @@ int main(int argc, char **argv)
 	};
 	// clang-format on
 
-	char *attester_type = "";
-	char *verifier_type = "";
-	char *tls_type = "";
-	char *crypto_type = "";
-	bool mutual = false;
-	bool provide_endorsements = false;
-	rats_tls_log_level_t log_level = RATS_TLS_LOG_LEVEL_INFO;
-	char *srv_ip = DEFAULT_IP;
-	int port = DEFAULT_PORT;
-	char *rim = "";
-	char *digest_file = "";
-	int opt;
-	bool enable_luks = false;
+	args->attester_type = "";
+	args->verifier_type = "";
+	args->tls_type = "";
+	args->crypto_type = "";
+	args->mutual = false;
+	args->provide_endorsements = false;
+	args->log_level = RATS_TLS_LOG_LEVEL_INFO;
+	args->srv_ip = DEFAULT_IP;
+	args->port = DEFAULT_PORT;
+	args->digest_file = "";
+	args->enable_luks = false;
 
 	do {
 		opt = getopt_long(argc, argv, short_options, long_options, NULL);
 		switch (opt) {
 		case 'a':
-			attester_type = optarg;
+			CHECK_LENGHT_ASSIGN(optarg, ENCLAVE_ATTESTER_TYPE_NAME_SIZE, args->attester_type);
 			break;
 		case 'v':
-			verifier_type = optarg;
+			CHECK_LENGHT_ASSIGN(optarg, ENCLAVE_VERIFIER_TYPE_NAME_SIZE, args->verifier_type);
 			break;
 		case 't':
-			tls_type = optarg;
+			CHECK_LENGHT_ASSIGN(optarg, TLS_TYPE_NAME_SIZE, args->tls_type);
 			break;
 		case 'c':
-			crypto_type = optarg;
+			CHECK_LENGHT_ASSIGN(optarg, CRYPTO_TYPE_NAME_SIZE, args->crypto_type);
 			break;
 		case 'm':
-			mutual = true;
+			args->mutual = true;
 			break;
 		case 'e':
-			provide_endorsements = true;
+			args->provide_endorsements = true;
 			break;
 		case 'l':
 			if (!strcasecmp(optarg, "debug"))
-				log_level = RATS_TLS_LOG_LEVEL_DEBUG;
+				args->log_level = RATS_TLS_LOG_LEVEL_DEBUG;
 			else if (!strcasecmp(optarg, "info"))
-				log_level = RATS_TLS_LOG_LEVEL_INFO;
+				args->log_level = RATS_TLS_LOG_LEVEL_INFO;
 			else if (!strcasecmp(optarg, "warn"))
-				log_level = RATS_TLS_LOG_LEVEL_WARN;
+				args->log_level = RATS_TLS_LOG_LEVEL_WARN;
 			else if (!strcasecmp(optarg, "error"))
-				log_level = RATS_TLS_LOG_LEVEL_ERROR;
+				args->log_level = RATS_TLS_LOG_LEVEL_ERROR;
 			else if (!strcasecmp(optarg, "fatal"))
-				log_level = RATS_TLS_LOG_LEVEL_FATAL;
+				args->log_level = RATS_TLS_LOG_LEVEL_FATAL;
 			else if (!strcasecmp(optarg, "off"))
-				log_level = RATS_TLS_LOG_LEVEL_NONE;
+				args->log_level = RATS_TLS_LOG_LEVEL_NONE;
 			break;
 		case 'i':
-			srv_ip = optarg;
+			args->srv_ip = optarg;
 			break;
 		case 'p':
-			port = atoi(optarg);
+			args->port = atoi(optarg);
 			break;
 		case 'r':
-			rim = optarg;
-			if (hex_to_bytes(rim, strlen(rim), rim_ref, &rim_ref_size) != 0) {
-				exit(1);
+			CHECK_LENGHT_ASSIGN(optarg, MAX_MEASUREMENT_SIZE + 1, rim);
+			if (hex_to_bytes(rim, strlen(rim), g_rim_ref, &g_rim_ref_size) != 0) {
+				printf("change rim to bytes failed\n");
+				return -1;
 			}
 			break;
 		case 'd':
-			digest_file = optarg;
-			digest_list_file_size = strlen(digest_file);
-			if (digest_list_file_size > PATH_MAX) {
-				printf("Digest list file too long.\n");
-				exit(1);
-			}
-			if (access(digest_file, F_OK) != 0) {
+			CHECK_LENGHT_ASSIGN(optarg, PATH_MAX, args->digest_file);
+			if (access(args->digest_file, F_OK) != 0) {
 				printf("Digest list file cannot be accessed.\n");
-				exit(1);
+				return -1;
 			}
-			memcpy(digest_list_file, digest_file, digest_list_file_size);
 			break;
 		case 'L':
-            enable_luks = true;
+            args->enable_luks = true;
             break;
 		case -1:
 			break;
-		case 'h':
+		default:
 			puts("    Usage:\n\n"
 			     "        rats-tls-client <options> [arguments]\n\n"
 			     "    Options:\n\n"
@@ -487,14 +500,19 @@ int main(int argc, char **argv)
 			     "        --digest/-d           set the digest list file for verifying IMA measurement\n"
 				 "        --LUKS/-L             is enable LUKS\n"
 			     "        --help/-h             show the usage\n");
-			exit(1);
-		default:
-			exit(1);
+			return -1;
 		}
 	} while (opt != -1);
+	return 0;
+}
 
-	global_log_level = log_level;
+int main(int argc, char **argv)
+{
+	client_args args = {0};
+	if (parse_input_args(argc, argv, &args)) {
+		return -1;
+	}
+	global_log_level = args.log_level;
 
-	return rats_tls_client_startup(log_level, attester_type, verifier_type, tls_type,
-				       crypto_type, mutual, provide_endorsements, srv_ip, port, enable_luks);
+	return rats_tls_client_startup(&args);
 }
diff --git a/samples/virtcca-server/rats-server.c b/samples/virtcca-server/rats-server.c
index 8a5c811..20cf3f3 100644
--- a/samples/virtcca-server/rats-server.c
+++ b/samples/virtcca-server/rats-server.c
@@ -36,6 +36,7 @@ rats_tls_err_t read_ima_measurements(uint8_t **value, size_t *size)
 	FILE *file;
 	uint8_t buffer[IMA_READ_BLCOK_SIZE];
 	size_t byte_read;
+	rats_tls_err_t ret = RATS_TLS_ERR_NO_MEM;
 
 	file = fopen(IMA_MEASUREMENTS_PATH, "rb");
 	if (file == NULL) {
@@ -49,16 +50,18 @@ rats_tls_err_t read_ima_measurements(uint8_t **value, size_t *size)
 		if (content == NULL) {
 			free(*value);
 			RTLS_ERR("memory reallocation failed");
-			return RATS_TLS_ERR_NO_MEM;
+			goto close;
 		}
 
 		*value = content;
 		memcpy(*value + *size, buffer, byte_read);
 		*size += byte_read;
 	}
+	ret = RATS_TLS_ERR_NONE;
 
+close:
 	fclose(file);
-	return RATS_TLS_ERR_NONE;
+	return ret;
 }
 
 int send_ima_log(rats_tls_handle handle)
diff --git a/src/verifiers/virtcca/token_parse.h b/src/verifiers/virtcca/token_parse.h
index 99b10d8..5af3bcd 100644
--- a/src/verifiers/virtcca/token_parse.h
+++ b/src/verifiers/virtcca/token_parse.h
@@ -90,6 +90,7 @@ typedef struct {
 } cca_token_t;
 
 #define MAX_TOKEN_SIZE (4096U)
+#define MAX_DEV_CERT_SIZE  4096
 
 typedef struct {
     uint8_t buf[MAX_TOKEN_SIZE];
diff --git a/src/verifiers/virtcca/verify_evidence.c b/src/verifiers/virtcca/verify_evidence.c
index 3d444d6..cac3b0e 100644
--- a/src/verifiers/virtcca/verify_evidence.c
+++ b/src/verifiers/virtcca/verify_evidence.c
@@ -25,6 +25,10 @@ enclave_verifier_err_t virtcca_verify_evidence(enclave_verifier_ctx_t *ctx,
     memcpy(cca_token_buf->buf, evidence->virtcca.report + sizeof(cca_token_buf->buf_size), cca_token_buf->buf_size);
 
     memcpy(&device_cert_len, evidence->virtcca.report + sizeof(cca_token_buf->buf_size) + cca_token_buf->buf_size, sizeof(device_cert_len));
+    if (device_cert_len > MAX_DEV_CERT_SIZE) {
+        RTLS_ERR("dev cert too long\n");
+        return ENCLAVE_VERIFIER_ERR_NO_MEM;
+    }
 
     device_cert_data = (uint8_t *)malloc(device_cert_len);
     if (device_cert_data == NULL) {
-- 
2.43.0

